<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!-- spring配置文件的核心点：数据源，与mybatis整合，事务控制 -->

	<!-- spring的配置文件，这里主要配置和业务逻辑有关的 -->
	<!-- 比如数据源，事务控制等等 -->
	<!-- test git -->
    <!-- test git -->
    <!-- test git -->
    <!-- test git -->


	<context:component-scan base-package="com.tom">
	<!-- 除了controller不扫描，其他都扫描 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:property-placeholder location="classpath:dbconfig.properties" />

	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.localhost.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.localhost.driverClass}"></property>
		<property name="user" value="${jdbc.localhost.user}"></property>
		<property name="password" value="${jdbc.localhost.password}"></property>
	</bean>

	<!-- 配置和mybatis的整合 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>

	<!-- 配置扫描器，将mybatis接口的实现加到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.tom.curd.dao"></property>
	</bean>
	<!-- 配置一个可以批量插入的sqlsession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!-- 事务控制的配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>

	<!-- 开启基于注解的事务，使用xml形式的事务（主要都是使用配置式） -->
	<aop:config>
		<!-- 切入点表达式, public表示方法的类型，可以不写， 后边的*表示任意返回时类型，最后的 两个点，表示方法中的参数可以任意多，也可以不写 -->
		<aop:pointcut expression="execution(public * com.tom.curd.service..*(..))"
			id="txPoint" />
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config>
	<!-- 配置事务增强，也就是事务如何切入 transaction-manager="transactionManager"可以不写，因为默认就是这个名字 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都开启事务 -->
			<tx:method name="*" />
			<!-- 以get开头的pointcut，都是查询方法，会做事务优化 -->
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>

</beans>